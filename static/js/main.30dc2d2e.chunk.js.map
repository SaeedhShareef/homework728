{"version":3,"sources":["Ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","ninjaList","ninjas","map","ninja","age","className","key","id","name","belt","AddNinja","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addNinja","Math","random","onSubmit","this","htmlFor","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNA2BeA,EAzBA,SAAC,GAAc,IACbC,EADY,EAAZC,OACmBC,KAAI,SAAAC,GACrB,OAAGA,EAAMC,IAAK,GAElB,yBAAKC,UAAU,QAAQC,IAAKH,EAAMI,IAChC,sCAAYJ,EAAMK,MACnB,qCAAWL,EAAMC,KACnB,sCAAYD,EAAMM,OAIZ,QAIT,OACI,yBAAKJ,UAAU,cACVL,I,OC6BLU,E,4MA7CXC,MAAQ,CACAH,KAAM,KACNJ,IAAK,KACLK,KAAM,M,EAEdG,aAAe,SAACC,GACP,EAAKC,SAAL,eACAD,EAAEE,OAAOR,GAAMM,EAAEE,OAAOC,S,EAGjCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKT,Q,EAE7BS,SAAW,SAACjB,GACRA,EAAMI,GAAKc,KAAKC,SAChB,IAAIrB,EAAM,sBAAO,EAAKU,MAAMV,QAAlB,CAA0BE,IACpC,EAAKW,SAAS,CACZb,OAAQA,K,uDAIV,OACI,6BACI,0BAAMsB,SAAUC,KAAKP,cACjB,2BAAOQ,QAAQ,QAAf,QAEA,2BAAOC,KAAK,OAAOnB,GAAG,OAAOoB,SAAUH,KAAKZ,eAE5C,2BAAOa,QAAQ,QAAf,OAEA,2BAAOC,KAAK,OAAOnB,GAAG,MAAMoB,SAAUH,KAAKZ,eAE3C,2BAAOa,QAAQ,QAAf,QAEA,2BAAOC,KAAK,OAAOnB,GAAG,OAAOoB,SAAUH,KAAKZ,eAC5C,gD,GArCGgB,aC6BRC,E,4MA1BblB,MAAQ,CACNV,OAAS,CACP,CAAEO,KAAM,MAAOJ,IAAK,GAAIK,KAAM,QAASF,GAAI,GAC3C,CAAEC,KAAM,QAASJ,IAAK,GAAIK,KAAM,QAASF,GAAI,GAC7C,CAAEC,KAAM,UAAWJ,IAAK,GAAIK,KAAM,OAAQF,GAAI,K,EAGlDa,SAAW,SAACjB,GACRA,EAAMI,GAAKc,KAAKC,SAChB,IAAIrB,EAAM,sBAAO,EAAKU,MAAMV,QAAlB,CAA0BE,IACpC,EAAKW,SAAS,CACZb,OAAQA,K,uDAIV,OACE,yBAAKI,UAAU,OACf,kDACC,+CACG,kBAAC,EAAD,CAAQJ,OAAQuB,KAAKb,MAAMV,SAC3B,kBAAC,EAAD,CAAUmB,SAAUI,KAAKJ,gB,GArBnBQ,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.30dc2d2e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Ninjas = ({ninjas}) => {\r\n           const ninjaList = ninjas.map(ninja => {\r\n                   if(ninja.age> 20){\r\n            return (\r\n               <div className=\"ninja\" key={ninja.id}>\r\n                 <div>Name: {ninja.name}</div>\r\n                <div>Age: {ninja.age}</div>\r\n              <div>Belt: {ninja.belt}</div>\r\n                         </div>\r\n             )\r\n         } else {\r\n             return null\r\n         }\r\n         })\r\n            \r\n           return(\r\n               <div className=\"ninja-list\">\r\n                   {ninjaList}\r\n                   </div>\r\n           ) \r\n        \r\n    \r\n\r\n}\r\n\r\nexport default Ninjas","import React, {Component} from 'react'\r\n\r\nclass AddNinja extends Component {\r\n    state = {\r\n            name: null,\r\n            age: null,\r\n            belt: null\r\n    }\r\n    handleChange = (e) => {\r\n             this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addNinja(this.state);\r\n    }\r\n    addNinja = (ninja) => {\r\n        ninja.id = Math.random();\r\n        let ninjas = [...this.state.ninjas, ninja];\r\n        this.setState({\r\n          ninjas: ninjas\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Name</label>\r\n\r\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n\r\n                    <label htmlFor=\"name\">Age</label>\r\n\r\n                    <input type=\"text\" id=\"age\" onChange={this.handleChange} />\r\n\r\n                    <label htmlFor=\"name\">Belt</label>\r\n\r\n                    <input type=\"text\" id=\"belt\" onChange={this.handleChange} />\r\n                    <button>Submit</button>\r\n\r\n                    \r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddNinja","import React, { Component } from 'react';\nimport Ninjas from \"./Ninjas\";\nimport AddNinja from \"./AddNinja\";\n\nclass App extends Component {\n  state = {\n    ninjas : [\n      { name: 'Ryu', age: 30, belt: 'black', id: 1},\n      { name: 'Yoshi', age: 20, belt: 'green', id: 2},\n      { name: 'Crystal', age: 25, belt: 'pink', id: 3}\n    ]\n  }\n  addNinja = (ninja) =>{\n      ninja.id = Math.random();\n      let ninjas = [...this.state.ninjas, ninja];\n      this.setState({\n        ninjas: ninjas\n      })\n  }\n  render() {\n      return (\n        <div className=\"App\">\n        <h1>My first React App</h1>\n         <p>Welcome :D :O :P</p>\n            <Ninjas ninjas={this.state.ninjas}/>\n            <AddNinja addNinja={this.addNinja}/>\n        </div>\n      );\n  }\n}  \n\nexport default App\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}